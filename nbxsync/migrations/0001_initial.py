# Generated by Django 5.2.6 on 2025-09-21 08:12

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import nbxsync.models.zabbixhostinterface
import nbxsync.models.zabbixproxy
import nbxsync.models.zabbixtemplate
import netbox.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ZabbixMacro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('macro', models.CharField(max_length=512)),
                ('value', models.CharField(blank=True, max_length=512)),
                ('description', models.CharField(blank=True, max_length=1024)),
                ('hostmacroid', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(max_length=2)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'nbxsync'), ('model', 'zabbixserver')), models.Q(('app_label', 'nbxsync'), ('model', 'zabbixtemplate')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Zabbix Macro',
                'verbose_name_plural': 'Zabbix Macros',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixMacroAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('is_regex', models.BooleanField(default=False)),
                ('context', models.CharField(blank=True, max_length=128)),
                ('value', models.CharField(max_length=2048)),
                ('macroid', models.IntegerField(blank=True, null=True)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'dcim'), ('model', 'manufacturer')), models.Q(('app_label', 'dcim'), ('model', 'devicerole')), models.Q(('app_label', 'dcim'), ('model', 'devicetype')), models.Q(('app_label', 'dcim'), ('model', 'platform')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), models.Q(('app_label', 'virtualization'), ('model', 'cluster')), models.Q(('app_label', 'virtualization'), ('model', 'clusterype')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixmacro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixmacroassignment', to='nbxsync.zabbixmacro')),
            ],
            options={
                'verbose_name': 'Zabbix Macro Assignment',
                'verbose_name_plural': 'Zabbix Macro Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('maintenanceid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=512)),
                ('active_since', models.DateTimeField()),
                ('active_till', models.DateTimeField()),
                ('description', models.CharField(blank=True, max_length=512)),
                ('maintenance_type', models.PositiveSmallIntegerField(default=0)),
                ('tags_evaltype', models.PositiveSmallIntegerField(default=0)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Zabbix Maintenance window',
                'verbose_name_plural': 'Zabbix Maintenance windows',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixMaintenanceObjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'nbxsync'), ('model', 'zabbixhostgroup')), models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), _connector='OR'), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixmaintenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixmaintenanceobjectassignment', to='nbxsync.zabbixmaintenance')),
            ],
            options={
                'verbose_name': 'Zabbix Maintenance Object Assignment',
                'verbose_name_plural': 'Zabbix Maintenance Object Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixMaintenancePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('period', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(86399940)])),
                ('timeperiod_type', models.PositiveSmallIntegerField(default=0)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('start_time', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(86400)])),
                ('every', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('dayofweek', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, null=True, size=None)),
                ('day', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('month', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, null=True, size=None)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixmaintenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixmaintenance', to='nbxsync.zabbixmaintenance')),
            ],
            options={
                'verbose_name': 'Zabbix Maintenance Period',
                'verbose_name_plural': 'Zabbix Maintenance Periods',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('name', models.CharField()),
                ('description', models.CharField(blank=True)),
                ('url', models.URLField()),
                ('token', models.CharField()),
                ('validate_certs', models.BooleanField(default=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Zabbix Server',
                'verbose_name_plural': 'Zabbix Servers',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixProxyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('proxy_groupid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('failover_delay', models.CharField(default='1m', max_length=10)),
                ('min_online', models.PositiveIntegerField(default=1)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixproxygroups', to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Proxy Group',
                'verbose_name_plural': 'Zabbix Proxy Groups',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixProxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('proxyid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('local_address', models.CharField(blank=True, max_length=255)),
                ('local_port', models.PositiveIntegerField(blank=True, default=10051, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)])),
                ('operating_mode', models.PositiveSmallIntegerField(default=0)),
                ('description', models.TextField(blank=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('port', models.CharField(blank=True, default='10051', max_length=10)),
                ('allowed_addresses', django.contrib.postgres.fields.ArrayField(base_field=models.GenericIPAddressField(), blank=True, default=list, size=None)),
                ('tls_connect', models.PositiveSmallIntegerField(default=1)),
                ('tls_accept', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, default=nbxsync.models.zabbixproxy.default_tls_accept, size=None)),
                ('tls_issuer', models.CharField(blank=True, max_length=255)),
                ('tls_subject', models.CharField(blank=True, max_length=255)),
                ('tls_psk_identity', models.CharField(blank=True, max_length=255)),
                ('tls_psk', models.CharField(blank=True, max_length=255)),
                ('custom_timeouts', models.BooleanField(default=False)),
                ('timeout_zabbix_agent', models.CharField(blank=True, max_length=20)),
                ('timeout_simple_check', models.CharField(blank=True, max_length=20)),
                ('timeout_snmp_agent', models.CharField(blank=True, max_length=20)),
                ('timeout_external_check', models.CharField(blank=True, max_length=20)),
                ('timeout_db_monitor', models.CharField(blank=True, max_length=20)),
                ('timeout_http_agent', models.CharField(blank=True, max_length=20)),
                ('timeout_ssh_agent', models.CharField(blank=True, max_length=20)),
                ('timeout_telnet_agent', models.CharField(blank=True, max_length=20)),
                ('timeout_script', models.CharField(blank=True, max_length=20)),
                ('timeout_browser', models.CharField(blank=True, max_length=20)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('proxygroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='zabbixproxies', to='nbxsync.zabbixproxygroup')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixproxies', to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Proxy',
                'verbose_name_plural': 'Zabbix Proxies',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.AddField(
            model_name='zabbixmaintenance',
            name='zabbixserver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nbxsync.zabbixserver'),
        ),
        migrations.CreateModel(
            name='ZabbixHostInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('type', models.IntegerField(default=1)),
                ('interfaceid', models.IntegerField(blank=True, null=True)),
                ('useip', models.IntegerField(default=1)),
                ('interface_type', models.IntegerField(default=1)),
                ('dns', models.CharField(blank=True, max_length=255)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('tls_connect', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('tls_accept', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, default=nbxsync.models.zabbixhostinterface.default_tls_accept, size=None)),
                ('tls_issuer', models.CharField(blank=True, max_length=255)),
                ('tls_subject', models.CharField(blank=True, max_length=255)),
                ('tls_psk_identity', models.CharField(blank=True, max_length=255)),
                ('tls_psk', models.CharField(blank=True, max_length=255)),
                ('snmp_version', models.IntegerField(blank=True, default=2, null=True)),
                ('snmp_usebulk', models.BooleanField(default=True)),
                ('snmp_community', models.CharField(blank=True, max_length=75)),
                ('snmpv3_context_name', models.CharField(blank=True, max_length=50)),
                ('snmpv3_security_name', models.CharField(blank=True, max_length=50)),
                ('snmpv3_security_level', models.IntegerField(blank=True, default=0, null=True)),
                ('snmpv3_authentication_passphrase', models.CharField(blank=True, max_length=50)),
                ('snmpv3_authentication_protocol', models.IntegerField(blank=True, default=0, null=True)),
                ('snmpv3_privacy_passphrase', models.CharField(blank=True, max_length=50)),
                ('snmpv3_privacy_protocol', models.IntegerField(blank=True, default=0, null=True)),
                ('ipmi_authtype', models.IntegerField(blank=True, default=-1, null=True)),
                ('ipmi_password', models.CharField(blank=True, max_length=255)),
                ('ipmi_privilege', models.IntegerField(blank=True, default=2, null=True)),
                ('ipmi_username', models.CharField(blank=True, max_length=50)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('ip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='zabbix_hostinterfaces', to='ipam.ipaddress')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Host Interface',
                'verbose_name_plural': 'Zabbix Host Interfaces',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixHostgroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=512)),
                ('groupid', models.IntegerField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('value', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixserver', to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Hostgroup',
                'verbose_name_plural': 'Zabbix Hostgroups',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixServerAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('hostid', models.IntegerField(blank=True, null=True)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'dcim'), ('model', 'manufacturer')), models.Q(('app_label', 'dcim'), ('model', 'devicerole')), models.Q(('app_label', 'dcim'), ('model', 'devicetype')), models.Q(('app_label', 'dcim'), ('model', 'platform')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), models.Q(('app_label', 'virtualization'), ('model', 'cluster')), models.Q(('app_label', 'virtualization'), ('model', 'clusterype')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixproxy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nbxsync.zabbixproxy')),
                ('zabbixproxygroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nbxsync.zabbixproxygroup')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixserverassignment', to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Server Assignment',
                'verbose_name_plural': 'Zabbix Server Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=512)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('tag', models.CharField(max_length=255)),
                ('value', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Zabbix Tag',
                'verbose_name_plural': 'Zabbix Tags',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixMaintenanceTagAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('operator', models.PositiveSmallIntegerField(default=2)),
                ('value', models.CharField(max_length=512)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixmaintenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixmaintenancetagassignment', to='nbxsync.zabbixmaintenance')),
                ('zabbixtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixmaintenancetagassignment', to='nbxsync.zabbixtag')),
            ],
            options={
                'verbose_name': 'Zabbix Maintenance Tag Assignment',
                'verbose_name_plural': 'Zabbix Maintenance Tag Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixTagAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'dcim'), ('model', 'manufacturer')), models.Q(('app_label', 'dcim'), ('model', 'devicerole')), models.Q(('app_label', 'dcim'), ('model', 'devicetype')), models.Q(('app_label', 'dcim'), ('model', 'platform')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), models.Q(('app_label', 'virtualization'), ('model', 'cluster')), models.Q(('app_label', 'virtualization'), ('model', 'clusterype')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixtagassignment', to='nbxsync.zabbixtag')),
            ],
            options={
                'verbose_name': 'Zabbix Tag Assignment',
                'verbose_name_plural': 'Zabbix Tag Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=512)),
                ('templateid', models.IntegerField()),
                ('interface_requirements', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=nbxsync.models.zabbixtemplate.default_interfacerequirement, size=None)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixserver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='nbxsync.zabbixserver')),
            ],
            options={
                'verbose_name': 'Zabbix Template',
                'verbose_name_plural': 'Zabbix Templates',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixTemplateAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'dcim'), ('model', 'manufacturer')), models.Q(('app_label', 'dcim'), ('model', 'devicerole')), models.Q(('app_label', 'dcim'), ('model', 'devicetype')), models.Q(('app_label', 'dcim'), ('model', 'platform')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), models.Q(('app_label', 'virtualization'), ('model', 'cluster')), models.Q(('app_label', 'virtualization'), ('model', 'clusterype')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixtemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixtemplateassignment', to='nbxsync.zabbixtemplate')),
            ],
            options={
                'verbose_name': 'Zabbix Template Assignment',
                'verbose_name_plural': 'Zabbix Template Assignments',
                'ordering': ('-created',),
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixHostgroupAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_sync_state', models.BooleanField(default=False)),
                ('last_sync_message', models.CharField(default='Never synced', max_length=3000)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'dcim'), ('model', 'manufacturer')), models.Q(('app_label', 'dcim'), ('model', 'devicerole')), models.Q(('app_label', 'dcim'), ('model', 'devicetype')), models.Q(('app_label', 'dcim'), ('model', 'platform')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), models.Q(('app_label', 'virtualization'), ('model', 'cluster')), models.Q(('app_label', 'virtualization'), ('model', 'clusterype')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('zabbixhostgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zabbixhostgroupassignment', to='nbxsync.zabbixhostgroup')),
            ],
            options={
                'verbose_name': 'Zabbix Hostgroup Assignment',
                'verbose_name_plural': 'Zabbix Hostgroup Assignments',
                'ordering': ('-created',),
                'constraints': [models.UniqueConstraint(fields=('zabbixhostgroup', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixhostgroupassignment_unique__hostgroupassignment_per_object', violation_error_message='Hostgroup can only be assigned once to a given object')],
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ZabbixHostInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('inventory_mode', models.IntegerField(default=0)),
                ('alias', models.CharField(blank=True, max_length=128)),
                ('asset_tag', models.CharField(blank=True, max_length=64)),
                ('chassis', models.CharField(blank=True, max_length=64)),
                ('contact', models.TextField(blank=True)),
                ('contract_number', models.CharField(blank=True, max_length=64)),
                ('date_hw_decomm', models.CharField(blank=True, max_length=64)),
                ('date_hw_expiry', models.CharField(blank=True, max_length=64)),
                ('date_hw_install', models.CharField(blank=True, max_length=64)),
                ('date_hw_purchase', models.CharField(blank=True, max_length=64)),
                ('deployment_status', models.CharField(blank=True, max_length=64)),
                ('hardware', models.CharField(blank=True, max_length=255)),
                ('hardware_full', models.TextField(blank=True)),
                ('host_netmask', models.CharField(blank=True, max_length=39)),
                ('host_networks', models.TextField(blank=True)),
                ('host_router', models.CharField(blank=True, max_length=39)),
                ('hw_arch', models.CharField(blank=True, max_length=32)),
                ('installer_name', models.CharField(blank=True, max_length=64)),
                ('location', models.TextField(blank=True)),
                ('location_lat', models.CharField(blank=True, max_length=16)),
                ('location_lon', models.CharField(blank=True, max_length=16)),
                ('macaddress_a', models.CharField(blank=True, max_length=64)),
                ('macaddress_b', models.CharField(blank=True, max_length=64)),
                ('model_field', models.CharField(blank=True, max_length=64)),
                ('name', models.CharField(blank=True, max_length=128)),
                ('notes', models.TextField(blank=True)),
                ('oob_ip', models.CharField(blank=True, max_length=39)),
                ('oob_netmask', models.CharField(blank=True, max_length=39)),
                ('oob_router', models.CharField(blank=True, max_length=39)),
                ('os', models.CharField(blank=True, max_length=128)),
                ('os_full', models.CharField(blank=True, max_length=255)),
                ('os_short', models.CharField(blank=True, max_length=128)),
                ('poc_1_cell', models.CharField(blank=True, max_length=64)),
                ('poc_1_email', models.CharField(blank=True, max_length=128)),
                ('poc_1_name', models.CharField(blank=True, max_length=128)),
                ('poc_1_notes', models.TextField(blank=True)),
                ('poc_1_phone_a', models.CharField(blank=True, max_length=64)),
                ('poc_1_phone_b', models.CharField(blank=True, max_length=64)),
                ('poc_1_screen', models.CharField(blank=True, max_length=64)),
                ('poc_2_cell', models.CharField(blank=True, max_length=64)),
                ('poc_2_email', models.CharField(blank=True, max_length=128)),
                ('poc_2_name', models.CharField(blank=True, max_length=128)),
                ('poc_2_notes', models.TextField(blank=True)),
                ('poc_2_phone_a', models.CharField(blank=True, max_length=64)),
                ('poc_2_phone_b', models.CharField(blank=True, max_length=64)),
                ('poc_2_screen', models.CharField(blank=True, max_length=64)),
                ('serialno_a', models.CharField(blank=True, max_length=64)),
                ('serialno_b', models.CharField(blank=True, max_length=64)),
                ('site_address_a', models.CharField(blank=True, max_length=128)),
                ('site_address_b', models.CharField(blank=True, max_length=128)),
                ('site_address_c', models.CharField(blank=True, max_length=128)),
                ('site_city', models.CharField(blank=True, max_length=128)),
                ('site_country', models.CharField(blank=True, max_length=64)),
                ('site_notes', models.TextField(blank=True)),
                ('site_rack', models.CharField(blank=True, max_length=128)),
                ('site_state', models.CharField(blank=True, max_length=64)),
                ('site_zip', models.CharField(blank=True, max_length=64)),
                ('software', models.CharField(blank=True, max_length=255)),
                ('software_app_a', models.CharField(blank=True, max_length=64)),
                ('software_app_b', models.CharField(blank=True, max_length=64)),
                ('software_app_c', models.CharField(blank=True, max_length=64)),
                ('software_app_d', models.CharField(blank=True, max_length=64)),
                ('software_app_e', models.CharField(blank=True, max_length=64)),
                ('software_full', models.TextField(blank=True)),
                ('tag', models.CharField(blank=True, max_length=64)),
                ('type', models.CharField(blank=True, max_length=64)),
                ('type_full', models.CharField(blank=True, max_length=64)),
                ('url_a', models.CharField(blank=True, max_length=2048)),
                ('url_b', models.CharField(blank=True, max_length=2048)),
                ('url_c', models.CharField(blank=True, max_length=2048)),
                ('vendor', models.CharField(blank=True, max_length=64)),
                ('assigned_object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('assigned_object_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'device')), models.Q(('app_label', 'virtualization'), ('model', 'virtualmachine')), _connector='OR')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Zabbix Host Inventory',
                'verbose_name_plural': 'Zabbix Host Inventories',
                'ordering': ('-created',),
                'constraints': [models.UniqueConstraint(fields=('assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixhostinventory_unique_assigned_object', violation_error_message='Only one inventory entry is allowed per assigned object.')],
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='zabbixmacro',
            constraint=models.UniqueConstraint(fields=('macro', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixmacro_unique__macro_per_assigned_object', violation_error_message='Macro must be unique per Assigned Object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmacro',
            constraint=models.UniqueConstraint(fields=('hostmacroid', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixmacro_unique__hostmacroid_per_assigned_object', violation_error_message='Host Macro ID must be unique per Assigned Object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmacroassignment',
            constraint=models.UniqueConstraint(fields=('zabbixmacro', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixmacroassignment_unique__macroassignment_per_object', violation_error_message='Macro can only be assigned once to a given object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmaintenanceobjectassignment',
            constraint=models.UniqueConstraint(fields=('zabbixmaintenance', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixmaintenanceobjectassignment_unique__maintenanceobjectassignment_per_object', violation_error_message='Object can only be assigned once to a Zabbix Maintenance object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixserver',
            constraint=models.UniqueConstraint(fields=('name',), name='nbxsync_zabbixserver_unique__name', violation_error_message='The Zabbix Server name must be unique'),
        ),
        migrations.AddConstraint(
            model_name='zabbixserver',
            constraint=models.UniqueConstraint(fields=('url',), name='nbxsync_zabbixserver_unique__url', violation_error_message='The Zabbix Server URL must be unique'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmaintenance',
            constraint=models.UniqueConstraint(fields=('name', 'zabbixserver'), name='nbxsync_zabbixmaintenance_unique__maintenance_per_zabbixserver', violation_error_message='Maintenance name must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmaintenance',
            constraint=models.UniqueConstraint(fields=('maintenanceid', 'zabbixserver'), name='nbxsync_zabbixmaintenance_unique__maintenanceid_per_zabbixserver', violation_error_message='Maintenance ID must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixhostinterface',
            constraint=models.UniqueConstraint(fields=('zabbixserver', 'type', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixhostinterface_unique__server_type_object', violation_error_message='A Hostinterface with this type has already been defined'),
        ),
        migrations.AddConstraint(
            model_name='zabbixhostgroup',
            constraint=models.UniqueConstraint(fields=('name', 'zabbixserver'), name='nbxsync_zabbixhostgroup_unique__hostgroup_per_zabbixserver', violation_error_message='Hostgroup must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixhostgroup',
            constraint=models.UniqueConstraint(fields=('groupid', 'zabbixserver'), name='nbxsync_zabbixhostgroup_unique__hostgroupid_per_zabbixserver', violation_error_message='Hostgroup ID must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixserverassignment',
            constraint=models.UniqueConstraint(fields=('zabbixserver', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixserverassignment_unique__zabbixserverassignment_per_object', violation_error_message='A Zabbix server can only be assigned once to a given object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixmaintenancetagassignment',
            constraint=models.UniqueConstraint(fields=('zabbixmaintenance', 'zabbixtag'), name='nbxsync_zabbixmaintenancetagassignment_unique__maintenancetagassignment_per_object', violation_error_message='Tags can only be assigned once to a Zabbix Maintenance'),
        ),
        migrations.AddConstraint(
            model_name='zabbixtagassignment',
            constraint=models.UniqueConstraint(fields=('zabbixtag', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixtagassignment_unique__tag_per_object', violation_error_message='A tag can only be assigned once to a given object'),
        ),
        migrations.AddConstraint(
            model_name='zabbixtemplate',
            constraint=models.UniqueConstraint(fields=('name', 'zabbixserver'), name='nbxsync_zabbixtemplate_unique__name_per_server', violation_error_message='Template name must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixtemplate',
            constraint=models.UniqueConstraint(fields=('templateid', 'zabbixserver'), name='nbxsync_zabbixtemplate_unique__templateid_per_server', violation_error_message='Template ID must be unique per Zabbix Server'),
        ),
        migrations.AddConstraint(
            model_name='zabbixtemplateassignment',
            constraint=models.UniqueConstraint(fields=('zabbixtemplate', 'assigned_object_type', 'assigned_object_id'), name='nbxsync_zabbixtemplateassignment_unique__templateassignment_per_object', violation_error_message='Template can only be assigned once to a given object'),
        ),
    ]
